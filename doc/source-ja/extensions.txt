********
拡張機能
********

.. module:: extensions
	:synopsis: TortoiseHg バイナリパッケージに同梱されている拡張機能について

この章では Windows 向けの TortoiseHg バイナリパッケージに標準添付されている
Mercurial の拡張機能について述べます。これらの拡張機能は TortoiseHg
をより便利に使ってもらうためで、必要になったらすぐに簡単に有効化できます。

Hgfold
======

`hgfold <http://mercurial.selenic.com/wiki/CaseFoldExtension>`_
は VFAT および NTFS 上におけるファイル名の大文字小文字の違いによる名前衝突を回避したい
Windows ユーザ向けの Mercurial 拡張機能です。

この拡張機能は以下の Mercurial コマンドにオプションを追加します。詳しいヘルプは
:command:`hg help <command>` で見ることができます： ::

	up    - ファイル名の衝突を解決して特定のリビジョンへ更新
	merge - ファイル名の衝突を解決してマージ

**インストール**

この拡張機能をテストするためにコマンドラインから次のように実行します： ::

	hg --config "extensions.fold=" status

今後も継続して使用したい場合は Mercurial.ini またはリポジトリの hgrc に次のように記述してください： ::

	[extensions]
	fold=

この設定をすればコマンドラインで --config 引数を指定する必要はありません。

**注意**

通常のマージコマンドと同様、 fold.py は作業ツリーの親を変更する必要があります。
まだ実験的な拡張機能ですので十分注意して使用してください。

:command:`hg recover` を実行後に何かエラーが発生した場合は
:command:`hg debugsetparents <number of tip revision>`
を試してみてください。tip リビジョンの番号は :command:`hg log -l 2`
で調べることができます。

Hgcr-gui
========

`コードレビュー <http://bitbucket.org/glimchb/hgcr-gui/wiki/Home>`_ 管理ツール

* この拡張機能はプロジェクトのコードレビューを管理します。
* レビュー管理を Mercurial 内で完結させます。
* One can add files to the review, remove them and notify reviewr that files are ready for review.
* レビューアはコードに "完了" とマークして、開発者にメッセージを返します。
* プロジェクトマネージャはレビュー状況を確認できます - どのファイルがレビュー済みでどれがまだなのか。
* hgcr は自動的に最後にレビューした時点から変更されたファイルを見つけ出して通知します。
* この拡張機能は TortoiseHg の GUI を利用しますが、コマンドラインから使うことができます。
* コードレビューのデータベースはリポジトリのルートディレトリに .code-review という名前のファイルとして保存されます。

**使い方**::

	hg cr [OPTIONS] [FILES]

	Code Review Plugin (requires Mercurial 1.3.x and TortoiseHg 0.9)

	options:

	 -c --complete  Mark CR as complete
	 -a --add       Add files to CR list
	 -r --remove    Remove files from CR list
	 -l --list      Print files in CR list

	use "hg -v help cr" to show global options

.. note::
	オプションなしで実行すると GUI が起動します。

**詳細説明**

* I've implemented the review around files and not changesets, because at the end,
  I want to be able to tell for the specific project if all the files went through
  code review process or not - the project status.
* おそらくあなたは多くの開発者と管理しなければならない複数のプロジェクトを持っていて、
  開発者のコードをレビューするグループがあります。
* 開発者のように変更点を追い続けるのは非常に難しいことですが、どのファイルが
  (レビューアによって) レビュー済みでどれがまだなのかを知るのは簡単です。
* この拡張機能を使えば開発者は作業が終わった段階でレビューが必要なファイルにマークを付けて、
  レビューアに知らせることができます。
* コードレビューのデータベースにチェンジセットが保管されているので、
  レビューアはチェンジセットをひろってきてコードレビューを始めます
  (開発者のコードに注釈を付けられる)。
* そしてコードレビューが終わり次第レビューアは "レビュー完了"
  のマークを付けて開発者に知らせます。
* プロジェクトマネージャはいつでもプロジェクトがどうなっているのか確認できます。

**インストール**

Mercurial.ini またはリポジトリの hgrc に次のように記述してください： ::

	[extensions]
	hgcr-gui=
 
Perfarce
========

`Perfarce <http://www.kingswood-consulting.co.uk/hg/perfarce/>`_ home
page.

This extension modifies the remote repository handling so that repository
paths that resemble::

	p4://p4server[:port]/clientname

cause operations on the named p4 client specification on the p4 server.
The client specification must already exist on the server before using
this extension. Making changes to the client specification Views causes
problems when synchronizing the repositories, and should be avoided.

Five built-in Mercurial commands are overridden.

outgoing::

	If the destination repository name starts with p4:// then this
	reports files affected by the revision(s) that are in the local
	repository but not in the p4 depot.

push::

	If the destination repository name starts with p4:// then this
	exports changes from the local repository to the p4 depot. If no
	revision is specified then all changes since the last p4 changelist
	are pushed. In either case, all revisions to be pushed are foled
	into a single p4 changelist.  Optionally the resulting changelist is
	submitted to the p4 server, controlled by the --submit option to
	push, or by setting **perfarce.submit** to True.  If the option
	**perfarce.keep** is False then after a successful submit the files
	in the p4 workarea will be deleted.

pull::

	If the source repository name starts with p4:// then this imports
	changes from the p4 depot, automatically creating merges of
	changelists submitted by hg push.  If the config option
	**perfarce.keep** is False then the import does not leave files in
	the p4 workarea, otherwise the p4 workarea will be updated with the
	new files.

incoming::

	If the source repository name starts with p4:// then this
	reports changes in the p4 depot that are not yet in the local
	repository.

clone::

	If the source repository name starts with p4:// then this
	creates the destination repository and pulls all changes from
	the p4 depot into it.

**TortoiseHg Integration**

When the perfarce extension is enabled, it adds a :guilabel:`start revision`
configurable option to the clone tool, and a :guilabel:`Perforce` menu
to the Repository Explorer.  The menu has two items:

identity::

	Finds the tip Perforce changelist in your local repository and
	selects it in the changelog window.

pending::

	Detects pending Perforce changelists that have been "push"ed to your
	Perforce client but have not been submitted, or have not been pulled
	back.  This opens the pending changelist dialog so that you can view
	these pending changelists and either submit or revert them.

**インストール**

You may want to add it to your Mercurial.ini or a repository's hgrc like this::

	[extensions]
	perfarce=
 
HGEOL
=====

hgeol は将来 win32text 拡張機能に取って代わる拡張機能で、
より完全で確実な方法で改行文字問題の解決を試みます。
まだ未確定な部分も多く、頻繁に内容が書き変わることが予想されるため、
ここに詳細な説明を書くかわりにリンクを張っておきます。

* `EOLTranslationPlan <http://mercurial.selenic.com/wiki/EOLTranslationPlan>`_
* `ソースコード <http://bitbucket.org/mg/hg-eol/>`_

Mercurial-Keyring
=================

* `Mercurial Keyring <http://pypi.python.org/pypi/mercurial_keyring>`_ ウェブサイト
* `Wiki ページ <http://mercurial.selenic.com/wiki/KeyringExtension>`_

keyring 拡張機能は安全に認証パスワード (HTTP/HTTPS and SMTP) をシステム固有の
パスワードデータベース (Gnome Keyring, KDE KWallet, OSXKeyChain, Win32,
コマンドライン) に保存するために keyring ライブラリのサービスを使います。

**何をするのか**

この拡張機能は初回のリモートリポジトリとのプル/プッシュ操作時に
HTTP パスワードの入力を促し、それをパスワードデータベースに保存します
(ユーザ名とリポジトリ URL の組み合せのキーで)。
それ以後は .hg/hgrc のユーザ名を確認して適切なパスワードを
パスワードデータベースから取り出して使用します。

同様に認証を必要とする SMTP 経由のメール送信についても初回のみ入力を要求し、
次回からはパスワードデータベースのパスワードを再利用します。

パスワード認証に失敗した場合は再び入力を求めます。

**インストール**

まずは拡張機能を Mercurial.ini ファイルで有効化してください： ::

	[extensions]
	mercurial_keyring=

**バックエンドの設定**

The most appropriate password backend should usually be picked automatically,
without configuration. Still, if necessary, it can be configured using
~/keyringrc.cfg file (keyringrc.cfg in the home directory of the current user).
Refer to `keyring docs <http://pypi.python.org/pypi/keyring>`_
for more details.

.. note::
	On Windows XP and above, your encrypted passwords are stored in the
	credentials subsystem using
	`CredRead <http://msdn.microsoft.com/en-us/library/aa374804%28VS.85%29.aspx>`_ and `CredWrite <http://msdn.microsoft.com/en-us/library/aa375187%28VS.85%29.aspx>`_

.. note::
	On Windows 2K, the encrypted passwords are stored in the system
	registry under HKCU\\Software\\Mercurial\\Keyring.

**リポジトリの設定 (HTTP)**

Edit repository-local .hg/hgrc and save there the remote repository path and
the username, but do not save the password. For example::

	[paths]
	myremote = https://my.server.com/hgrepo/someproject

	[auth]
	myremote.schemes = http https
	myremote.prefix = my.server.com/hgrepo
	myremote.username = mekk

Simpler form with url-embedded name can also be used::

	[paths]
	bitbucket = https://User@bitbucket.org/User/project_name/

.. note::
	If both username and password are given in .hg/hgrc, extension will
	use them without using the password database. If username is not
	given, extension will prompt for credentials every time, also
	without saving the password. So, in both cases, it is effectively
	reverting to the default behaviour.

Consult `[auth] <http://www.selenic.com/mercurial/hgrc.5.html#auth>`_
section documentation for more details.

**リポジトリの設定 (SMTP)**

Edit either repository-local .hg/hgrc, or ~/.hgrc (the latter is usually
preferable) and set there all standard email and smtp properties, including
smtp username, but without smtp password. For example::

	[email]
	method = smtp
	from = Joe Doe <Joe.Doe@remote.com>

	[smtp]
	host = smtp.gmail.com
	port = 587
	username = JoeDoe@gmail.com
	tls = true

Just as in case of HTTP, you must set username, but must not set password here
to use the extension, in other cases it will revert to the default behaviour.

**使い方**

Configure the repository as above, then just pull and push (or email) You
should be asked for the password only once (per every username +
remote_repository_url combination). 

.. vim: noet ts=4
