===========================
TortoiseHg Changelog Viewer
===========================

.. module:: changelog.dialog
   :synopsis: Dialog used to view log

.. figure:: figures/log.png
   :alt: Changelog

   Changelog viewer dialog
	
The toolbar buttons from left to right:

:guilabel:`Refresh`
	Reload the revision history (if you commit in another window, etc)
:guilabel:`Filter`
	Open revision filter dialog, also has drop-down for common filters
:guilabel:`Datamine`
	Open datamine application for history searches and file annotations
:guilabel:`Other Parent`
	Only active when viewing merge changesets, toggles parents
:guilabel:`Synchronize`
	Communicate changes with other repositories

The changelog tool is primarily used to visualize the revision history
of your repository. It presents a graph of the revision history, showing
the parent/child relationship of each change. At each revision you can
view the files that it modified and the contents of those changes. These
are the obvious features that a revision history browser provides.

This changelog browser offers much more.

Revision Graph Details
----------------------

The graph column shows the child-parent relationships between revisions
in your repository history.  This column auto-sizes for as many lines of
ancestry that are required to visualize the revisions you have loaded.
The column does have a hard-limit width to prevent some degenerative
cases from breaking the viewer.

On the right of the revision graph are three buttons. From top to bottom
these are:

:guilabel:`column toggles`
	toggle the display of columns in the graph
:guilabel:`next-N revisions`
	load the next N revisions into the graph
:guilabel:`all revisions`
	load all remaining revisions into the graph

Revision Context Menus
----------------------

Right-clicking on a revision in the (top) graph pane will bring up the
revision context menu.

:guilabel:`visualize change`
	open this change in your visual diff tool
:guilabel:`display change`
	open this changeset in the changeset browser (more below)
:guilabel:`diff to local`
    display changes (visual diff) between this revision and your current
    working directory
:guilabel:`update`
	update your working directory to this revision [1]
:guilabel:`merge with`
	merge with this revision [2]
:guilabel:`copy hash`
	copy current revision's full hash to the clipboard
:guilabel:`export patch`
	generate a patch file of this revision's changes
:guilabel:`email patch`
	send this revision's changes to email recipient [3]
:guilabel:`bundle rev:tip`
	create a bundle with all revs from selected to tip
:guilabel:`add/remove tag`
	opens the TortoiseHg tag dialog with this revision selected
:guilabel:`backout`
	create a backout changeset for selected revision
:guilabel:`revert`
	revert working copy to this revision's contents, without updating working
	directory parent revision. Use with care.
:guilabel:`strip`
	Remove the selected revision and all of it's descendants from the repository [4]


If you right-click on a row other than the one that was currently selected, you get a different context menu.
This one is for visualizing diffs between two arbitrary revisions.

:guilabel:`diff with selected`
	 Description
:guilabel:`visual diff with selected` [5]
	 Description
:guilabel:`email from here to selected`
	 Description
:guilabel:`bundle from here to selected`
	 Description
:guilabel:`merge with selected` [6]
	 Description
						 
1) Opens the TortoiseHg update/checkout dialog with this revision selected.
2) Opens the TortoiseHg merge dialog with this revision selected.
3) Opens the TortoiseHg email dialog with this revision selected.
4) The strip command will store the stripped revisions in a bundle file
   that can later be reapplied. See also_
5) :menuselection:`Settings --> Global --> TortoiseHg --> Visual Diff Command`
6) Only sensitive if the selected revision is your current working
   directory parent

.. _also: http://www.selenic.com/mercurial/wiki/index.cgi/EditingHistory


File List Context Menus
-----------------------

Right-clicking on filenames in the file list (bottom left) pane will
bring up a context menu for the selected file:

:guilabel:`visual diff`
	 Open this revision of the file in your visual editor[1]
:guilabel:`diff to local`
	 Visualize differences between this revision and your checked out version
:guilabel:`save at revision`
	 Write this revision of the file to specified location
:guilabel:`file history`
	 Show revisions that modified this file [2]
:guilabel:`annotate file`
	 Open this file in the datamine app, annotated at this revision
:guilabel:`revert file contents`
	 Checkout this specific revision of this file  [3]
						 
1) :menuselection:`Settings --> Global --> TortoiseHg --> Visual Editor`
2) Does not show revisions where a file was deleted, as this is only a
   manifest change, it does not modify the file's history.
3) The new contents will appear as local changes and must be committed.


Changeset browser
-----------------
The changelog and datamine tools can open the changeset browser to view
a single revision or the combined effect of a range of revisions. The
changeset browser is very similar to the commit and shelve tools. It has
a file list on the left of all files that have been changed, and a diff
pane on the right with the changes to each file.

In release 0.7 of TortoiseHg, the 'diff change with' changeset browser
now supports change selection.  You can select files and hunks that you
wish to extract from the changeset(s) you are browsing and write them to
a patch file using the :guilabel:`Save as` toolbar button.  This is a very
efficient way to cherry pick changes made to a repository.
Unfortunately, TortoiseHg still does not have a dialog for importing
changes into a repository, so this must be done on the command line with
the :command:`hg import` command.

This changeset browser also supports the :kbd:`CTRL-C` keyboard
accelerator to copy hightlighted diff hunks	to the clipboard.

Configurables
-------------

The changelog browser has a few configurable options that can be set in
the TortoiseHg Settings dialog on the Changelog tab.

:guilabel:`Author coloring`
	If true, each author's changeset will be given a unique color
:guilabel:`Long Summary`
	Concatenate commit message lines until 80 chars are reached
:guilabel:`Graph batch limit`
	Number of revisions to read in each batch load
:guilabel:`Copy Hash`
	Copy a revision's changeset id hash to the clipboard when selected
						
The exact colors given to particular users can be configured by adding
lines like these to your :file:`Mercurial.ini` file: ::

	[tortoisehg]
	authorcolor.USERNAME = color

The changelog browser also respects the following settings on the
TortoiseHg tab:

:guilabel:`Tab Width`
	Number of spaces to expand tabs in diffs
:guilabel:`Max Diff Size`
	Maximum size of file to be diffed
:guilabel:`Bottom Diffs`
	Show diffs below file list
