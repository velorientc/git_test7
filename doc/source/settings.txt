===================
TortoiseHg Settings
===================

.. module:: settings.dialog
	:synopsis: Dialog used to set preferences

.. figure:: figures/settings.png
	:alt: Settings dialog

	Settings dialog

The Settings dialog is used to configure both TortoiseHg and the
underlying Mercurial DVCS.  Since TortoiseHg uses Mercurial's underlying
configuration system to store and retrieve its settings, these are
essentially the same thing.

Mercurial on Windows has a three-tier configuration system.

1) A site-wide configuration file in
   :file:`C:\\Program Files\\TortoiseHg\\Mercurial.ini`
   This file is read first and thus has the lowest priority.
2) A per-user configuration file in
   :file:`C:\\Documents and Settings\\username\\Mercurial.ini`
   This file is read second and thus can override settings in the
   site-wide configuration file.
3) A per-repository configuration file in :file:`repo-root\\.hg\\hgrc` This
   file is read last and can override site-wide and user global settings.

The site-wide file can be overwritten on upgrades so it is recommended
that you do not make changes to this file.  Instead, you should make
changes to your user :file:`Mercurial.ini` and/or the repository
:file:`hgrc` file.  The TortoiseHg Settings dialog enforces this
suggestion by only operating in two modes:

Global
	edits your user :file:`Mercurial.ini` file
Repository
	edits a repository :file:`.hg/hgrc` file

In TortoiseHg 0.8, you may toggle between the two modes using the combo
box at the top of the dialog.

Most TortoiseHg users will want to store all configurables in their
global user settings, and only use the repository hgrc to store paths
(remote repository aliases) and web settings, though it is possible to
override many configurables per-repository (a common example is to
configure a different username for use in a repository).  Also note that
the user and repository configuration files may not exist until you run
the Settings dialog for the first time.

Tabs
====

The Settings tool is a tabbed application.

Each tab corresponds roughly to a section of your :file:`Mercurial.ini`
file, though there is a certain amount of overlap. Some sections were
split across multiple tabs for clarity.

Every tab except of the :guilabel:`Paths` tab has the same format, a list of
configurable options with a drop-down combo box with possible values and
a history of options you have used for that setting. The configurable
name (label) has a tooltip which describes in more detail what you are
configuring and its default value.

The :guilabel:`Paths` tab is where you can store URLs (paths) to related
repositories. It is rare to store paths in the site-wide or user
configuration files, most of the time you will only store these in a
repository configuration file. Mercurial has two special path names that
can be used as default targets for some operations.

default
	the default URL to pull from, usually clone source
default-push
	the default push target when using the command line

Please consult the Mercurial wiki for more detailed information about
these configurables (except for the first three tabs:
:guilabel:`TortoiseHg`, :guilabel:`Commit`, :guilabel:`Changelog`, which
are specifically for TortoiseHg).

TortoiseHg
----------

:guilabel:`3-way Merge Tool:`
	Graphical merge program for resolving merge conflicts.  If left
	unspecified, Mercurial will use the first applicable tool it finds
	on your system or use its internal merge tool that leaves conflict
	markers in place.  Chose internal:merge to force conflict markers,
	internal:prompt to always select local or other, or internal:dump
	to leave files in the working directory for manual merging.

:guilabel:`Visual Diff Command:`
	Specify visual diff tool; must be an extdiff command.

:guilabel:`Skip Diff Window:`
	Bypass the builtin visual diff dialog and directly use your
	visual diff tool's directory diff feature.  Only enable this
	feature if you know your diff tool has a valid extdiff
	configuration.  Default: False.

:guilabel:`Visual Editor:`
	Specify the visual editor used to view files, etc.

:guilabel:`CLI Editor:`
	The editor to use during a commit and other
	instances where Mercurial needs multiline input from
	the user.  Only used by command line interface commands.
		
:guilabel:`Tab Width:`
	Specify the number of spaces that tabs expand to in various.
	TortoiseHg windows. Default: Not expanded.

:guilabel:`Max Diff Size:`
	The maximum size file (in KB) that TortoiseHg will
	show changes for in the changelog, status, and commit windows.
	A value of zero implies no limit.  Default: 1024 (1MB).

:guilabel:`Bottom Diffs:`
	Show the diff panel below the file list in status, shelve, and
	commit dialogs.
	Default: False (show diffs to right of file list).
	
Commit
------

:guilabel:`Username:`
	Name associated with commits.

:guilabel:`External Commit Tool:`
	Select commit tool launched by TortoiseHg. (Qct is no longer
	distributed as part of TortoiseHg).
	Default: None (use the builtin tool). [DEPRECATED]

:guilabel:`Summary Line Length:`
	Maximum length of the commit message summary line.
	If set, TortoiseHg will issue a warning if the
	summary line is too long or not separated by a
	blank line. Default: 0 (unenforced).

:guilabel:`Message Line Length:`
	Word wrap length of the commit message.  If
	set, the popup menu can be used to format
	the message and a warning will be issued
	if any lines are too long at commit.
	Default: 0 (unenforced).
	
Changelog
---------

:guilabel:`Author Coloring:`
	Color changesets by author name.  If not enabled,
	the changes are colored green for merge, red for
	non-trivial parents, black for normal.
	Default: False.

:guilabel:`Long Summary:`
	If true, concatenate multiple lines of changeset summary
	until they reach 80 characters.
	Default: False.

:guilabel:`Log Batch Size:`
	The number of revisions to read and display in the
	changelog viewer in a single batch.
	Default: 500.

:guilabel:`Copy Hash:`
	Allow the changelog viewer to copy the changeset hash
	of the currently selected changeset into the clipboard.
	Default: False.

Sync
----	

:guilabel:`After pull operation:`
	Operation which is performed directly after a successful pull.
	update equates to pull --update, fetch equates to the fetch
	extension, rebase equates to pull --rebase.  Default: none.

:guilabel:`Remote repository paths`
	TODO

Web
---
	
:guilabel:`Name:`
	Repository name to use in the web interface.
	Default is the working directory.

:guilabel:`Description:`
	Textual description of the repository's purpose or
	contents.

:guilabel:`Contact:`
	Name or email address of the person in charge of the
	repository.

:guilabel:`Style:`
	Which template map style to use.

:guilabel:`Archive Formats:`
	Comma separated list of archive formats allowed for
	downloading.

:guilabel:`Port:`
	Port to listen on.

:guilabel:`Push Requires SSL:`
	Whether to require that inbound pushes be transported
	over SSL to prevent password sniffing.

:guilabel:`Stripes:`
	How many lines a "zebra stripe" should span in multiline output.
	Default is 1; set to 0 to disable.

:guilabel:`Max Files:`
	Maximum number of files to list per changeset.

:guilabel:`Max Changes:`
	Maximum number of changes to list on the changelog.

:guilabel:`Allow Push:`
	Whether to allow pushing to the repository. If empty or not
	set, push is not allowed. If the special value "*", any remote
	user can push, including unauthenticated users. Otherwise, the
	remote user must have been authenticated, and the authenticated
	user name must be present in this list (separated by whitespace
	or ","). The contents of the allow_push list are examined after
	the deny_push list.

:guilabel:`Deny Push:`
	Whether to deny pushing to the repository. If empty or not set,
	push is not denied. If the special value "*", all remote users
	are denied push. Otherwise, unauthenticated users are all
	denied, and any authenticated user name present in this list
	(separated by whitespace or ",") is also denied. The contents
	of the deny_push list are examined before the allow_push list.

:guilabel:`Encoding:`
	Character encoding name.
	
Proxy
-----
	
:guilabel:`Host:`
	TODO
	
:guilabel:`Bypass List:`
	TODO

:guilabel:`Password:`
	TODO

:guilabel:`User:`
	TODO

Email
-----

:guilabel:`From:`
	TODO

:guilabel:`To:`
	TODO

:guilabel:`Cc:`
	TODO

:guilabel:`Bcc:`
	TODO

:guilabel:`method:`
	TODO

:guilabel:`SMTP Host:`
	TODO

:guilabel:`SMTP Port:`
	TODO

:guilabel:`SMTP TLS:`
	TODO

:guilabel:`SMTP Username:`
	TODO

:guilabel:`SMTP Password:`
	TODO

:guilabel:`Local Hostname:`
	TODO

Diff
----

:guilabel:`Git Format:`
	TODO

:guilabel:`No Dates:`
	TODO

:guilabel:`Show Function:`
	TODO
	
:guilabel:`Ignore White Space:`
	TODO

:guilabel:`Ignore WS Amount:`
	TODO

:guilabel:`Ignore Blank Lines:`
	TODO

	
	
From command line
-----------------

The setting dialog can be started from command line ::

	hgtk repoconfig

for the repository settings or ::

	hgtk userconfig

for the user configuration.

The syntax is simple, no options or parameters are needed, except the global options.

.. vim: noet ts=4
