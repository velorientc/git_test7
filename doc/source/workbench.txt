Workbench
=========

.. module:: changelog.dialog
	:synopsis: Dialog used to view log

The Workbench is used to visualize the revision history of your
repositories and to perform any maintenance tasks that involve
changesets. It presents a graph of the revision history, showing the
parent/child relationship of each change. At each revision you can view
the files that were modified and the contents of those changes.

.. figure:: figures/workbench.png
	:alt: Workbench

	Workbench dialog.

Workbench Main Widgets are:

	:guilabel:`Changelog View`
		A tabbed widget to view multiple repositories at once. The different
		columns show general information about each changeset in the graphlog.
		You can configure the columns to show from the menu via
		:guilabel:`View -> Choose Log Columns...`, and there you can reorder
		the columns too. This is the main or central widget of the 	Workbench
		application.

	:guilabel:`Repository Registry`
		This widget, by default shown on the left, allows to manage multiple
		repositories from the Workbench. You can show/hide it via
		:guilabel:`View -> Show Repo Registry` or with the corresponding button
		in the Dock Toolbar. It's also a dockable widget.
		The :guilabel:`View -> Show Paths` menu option allows to not only view
		the names of the repositories but also their path in a second column.
	
	:guilabel:`Output Log`
		This dockable widget, which can be shown/hidden with
		:guilabel:`View -> Show Output Log`, gives the user information about
		the Mercurial commands that were executed during the current session.
		You can also use it as a commandline by typing Mercurial commands at its
		prompt 	directly. It shows any error messages when appropriate. Content
		is wiped when the Workbench is closed.

	:guilabel:`Task Tabs`
		The lower right part of the Workbench is occupied by a stack of widget
		where you can perform various frequent task. It is a tabbed widget.
		See further for more detail about each one.

Workbench Menus
---------------

The changelog tool has a menu bar for accessing tool functions and for
launching other tools.

	:guilabel:`File`
		Handle repositories and settings.

		.. figure:: figures/file-menu.png
			:alt: File menu

	:guilabel:`View`
		Manage the visibility of various parts of the Workbench.

		.. figure:: figures/view-menu.png
			:alt: View menu

	:guilabel:`Repository`
		Perform special actions on the active repository.

		.. figure:: figures/repository-menu.png
			:alt: Repository menu

	:guilabel:`Help`
		About shows TortoiseHg version info.

Edit Toolbar
------------

.. figure:: figures/edit-toolbar.png
	:alt: Edit Toolbar

Moving around in the changelog. All the buttons work on the current	repository.

	:guilabel:`Refresh`
		Reload the revision history (if you commit in another window, etc)
		for all open repositories.
	:guilabel:`Back`
		Go back to the previous view.
	:guilabel:`Forward`
		Go forward to the next view.
	:guilabel:`Filter toolbar`
		Show and activate the Filter Toolbar at the top of the changelog.

Dock Toolbar
------------

.. figure:: figures/dock-toolbar.png
	:alt: Dock Toolbar

Show or hide some main widgets in the Workbench.

	:guilabel:`Show Repository Registry`
		Show/hide the Repository Registry widget.
	:guilabel:`Show Output Log`
		Show/hide the Output Log widget.

Sync Toolbar
------------

.. figure:: figures/sync-toolbar.png
	:alt: Sync Toolbar

Synchronize your repository with other repositories.

	:guilabel:`Incoming`
		Download incoming changesets from the remote repository, store then in
		a temporary bundle file, then enter bundle preview mode with the
		incoming changes applied.  Incoming changesets will be shown as normal,
		while others will be shown grayed in the revision graph.
		The buttons :guilabel:`Accept` and :guilabel:`Reject` are then
		shown at the top of the changelog.

		:guilabel:`Accept`
			Accept (pull) the changesets from the previewed bundle.  This
			button is only visible when previewing a changeset bundle.
			The after-pull effect is respected after pulling from a bundle.

		:guilabel:`Reject`
			Reject the changesets from the previewed bundle and exit preview
			mode.  This button is only visible when previewing a changeset
			bundle.

	:guilabel:`Pull`
		Pull incoming changesets from the remote repository, then apply
		after-pull effect (update, fetch, or rebase).
	:guilabel:`Outgoing`
		Determine outgoing changesets that would be pushed to the
		remote repository.  Outgoing changesets will be shown as normal, while
		others will be shown grayed in the revision graph.
	:guilabel:`Push`
		Push outgoing changesets to the remote repository.

Task Toolbar
------------

.. figure:: figures/task-toolbar.png
	:alt: Task Toolbar

Work with the various tasktabs.

	:guilabel:`Revision Details`
		Shows information about the current revision : files added, removed,
		renamed, or modified, file contents, changelog info.
		See _`Revision Details` for more detail.

..        .. figure:: figures/revdetails-tasktab.png
			:alt: Revision Details TaskTab

..

	:guilabel:`Commit`
		Here you can add new files, and do your commits.
		See _`Commit` for more detail.

..		.. figure:: figures/commit-tasktab.png
			:alt: Commit TaskTab

..

	:guilabel:`Manifest`
		Shows information about the complete content of the repository as it
		was for the current revision. Here you can view the raw content of
		files or an Annotate view.  There is a context menu on the filelist
		to do further digging into the history data.  You can even compare a
		file between different revision from there.
		See _`Manifest` for more detail.

..		.. figure:: figures/manifest-tasktab.png
			:alt: Manifest TaskTab

..

	:guilabel:`Search`
		For performing text searches through file content.
		See _`Search` for more detail.

..		.. figure:: figures/search-tasktab.png
			:alt: Search Tasktab

..

	:guilabel:`Synchronize`
		Gives you full control about how you let your repositories
		communicate with any other repository.
		See _`Synchronize` for more detail.

..		.. figure:: figures/sync-tasktab.png
			:alt: Synchronise Tasktab

..

	:guilabel:`Patch Queue`
		This widget implements the MQ extension functionality.
		See _`Patch Queue` for more detail.

..		.. figure:: figures/mq-tasktab.png
			:alt: Patch Queue TaskTab

..

Filter Toolbar
--------------

.. figure:: figures/filter-toolbar.png
	:alt: Filter Toolbar

	Filter features for the changelog tool.

The filter bar allows one to quickly filter the changesets panel. It is based
on the Revision Sets feature of Mercurial.
See `hg.1.html#revsets <http://www.selenic.com/mercurial/hg.1.html#revsets>`_ 
for details on how to specify revision sets.
The toolbar can be toggled with :kbd:`Ctrl-S`. Parts from left to right:

	:guilabel:`Clear`
		Clears the search lineedit.  Essentially disables all filters.
	:guilabel:`Filter entry`
		Here you can type a filtering condition. The widget is a combobox,
		holding a history of previous filtering conditions.
	:guilabel:`Trigger`
		Applies the condition set by the filter.
	:guilabel:`Open`
		Opens the RevSet dialog. There you can select and/or enter your
		condition in a combined way via point-and-click and by typing.
	:guilabel:`Delete`
		Deletes the selected query.
	:guilabel:`Toggle filter`
		Applies the filter condition by sowing changesets that don't conform
		to it in a color suggesting insensitiveness, so the selected ones
		stand out more.
	:guilabel:`Branch options`
		A few options for showing branches.
		See :guilabel:`Repo Settings -> Changelog -> Dead Branches` for
		a method to prune names from this combo box.
	:guilabel:`Branches combo`
		A combo box with the list of named branches in your repository.
	:guilabel:`Custom Filter Combo`
		Finally there is a combo box that selects among the various
		filter types that can be manually specified.

Revision Graph Details
----------------------

The graph column shows the child-parent relationships between revisions
in your repository history.  This column auto-sizes for as many lines of
ancestry that are required to visualize the revisions you have loaded.
The column has an initial hard-limit width to prevent some degenerative
cases from breaking the viewer, but can be resized after refreshes.

Performance Implications
------------------------

There are some Repository Explorer features that should probably be
avoided in large repositories.

* :menuselection:`View -> Color By Branch` 
	This option requires the log viewer to query the branch name of
	every revision in order to draw the graph.  It can cause refreshes
	to be slow.

* :menuselection:`View -> Compact Graph` 
	This option can cause refresh to be slower than the default setting.
	Also be aware that enabling this feature makes the graph lines less
	accurate.  The feature trades merge parent accuracy for horizontal
	screen space.

* Column :guilabel:`Changes` 
	This column can be expensive to calculate on repositories with large
	working copies, causing both refreshes and scrolling to be slow.


Revision Context Menus
----------------------

Right-clicking on a revision in the (top) graph pane will bring up the
revision context menu.

	:guilabel:`Visualize Change`
		Open this change in your visual diff tool
	:guilabel:`Display Change`
		Open this changeset in the changeset browser (more below)
	:guilabel:`Diff to Local`
		Display changes (visual diff) between this revision and your
		current working directory
	:guilabel:`Copy Hash`
		Copy current revision's full hash to the clipboard
	:guilabel:`Push to Here`
		Performs the equivalent of 'push -r <rev>'.  This option is only
		available on changesets marked as outgoing.
	:guilabel:`Push this Branch`
		Performs the equivalent of 'push --new-branch --branch <branch>'.
		This option is only available on changesets marked as outgoing.
	:guilabel:`Update...`
		Update your working directory to this revision. Opens the
		TortoiseHg update dialog with this revision selected.
	:guilabel:`Merge With...`
		Merge with this revision. Opens the TortoiseHg merge dialog with
		this revision selected.
	:guilabel:`Backout...`
		Create a backout changeset for selected revision
	:guilabel:`Revert`
		Revert working copy to this revision's contents, without
		updating working directory parent revision. Use with care.
	:guilabel:`Export`
		:guilabel:`Export Patch`
			Generate a patch file containing this revision's changes
		:guilabel:`Email Patch`
			Send this revision's changes to email recipient.  Opens the
			TortoiseHg email dialog with this revision selected.
		:guilabel:`Bundle rev:tip`
			Create a bundle with all revs from selected to tip
		:guilabel:`Archive...`
			Open the archive dialog for this revision, allowing user to
			generate a backup copy of the repository at that revision.
	:guilabel:`Tag`
		:guilabel:`Add/Remove Tag`
			Open the TortoiseHg tag dialog with this revision selected
		:guilabel:`Add/Move/Remove Bookmark`
			Open the TortoiseHg bookmark dialog with this revision selected
			*This option requires the boomarks extension to be enabled*
		:guilabel:`Rename Bookmark`
			Open the TortoiseHg bookmark rename dialog
			*This option requires the boomarks extension to be enabled*
	:guilabel:`Mercurial Queues`
		:guilabel:`Import revision to MQ`
			Import selected revision into the current patch queue.  Only
			valid for qbase or checked out head revision.  *Only visible
			when MQ is enabled*
		:guilabel:`Strip Revision...`
			Remove the selected revision and all of it's descendants from the
			repository [#rcm1]_ *Only visible when MQ is enabled*
	:guilabel:`Transplant to local`
		Transplant selected revision onto the current working parent.
		*Only visible when the transplant extension is enabled*
	:guilabel:`Bisect`
		:guilabel:`Reset`
			Reset bisect state. See `bisect <#id10>`_ section below.
		:guilabel:`Mark as Good`
			Mark changeset as good
		:guilabel:`Mark as Bad`
			Mark changeset as bad
		:guilabel:`Skip Testing`
			Skip testing this changeset

If you right-click on a row other than the one that was currently
selected, you get a secondary context menu which defines commands that
operation on revision ranges.

	:guilabel:`Diff with selected`
		Opens status viewer with cumulative changes of the range of
		changesets.  The status viewer allows cherry picked changes to
		be saved to a file.
	:guilabel:`Visual Diff with selected`
		Opens visual diff window with cumulative changes of the range
		of changesets.  See also menuselection:`Global Settings -->
		TortoiseHg --> Visual Diff Tool`
	:guilabel:`Email from here to selected`
		Opens email dialog with range of changesets.
	:guilabel:`Bundle from here to selected`
		Creates a bundle file with range of changesets.
	:guilabel:`Export patches from here to selected`
		Creates a patch file for each changeset in selected range.
	:guilabel:`Merge with ...`
		Merges this revision with the other selected revision.  If
		neither revision is currently checked out, the merge dialog will
		be forced to update to the first selected revision before
		starting the merge.  This will fail if the working directory is
		not clean.
	:guilabel:`Transplant revision range to local`
		Transplant selected range of changesets on to current working
		parent revision. *Only visible when the transplant extension is
		enabled*
	:guilabel:`Rebase on top of selected`
		Rebase selected changeset and ancestors on top of original
		selected revision.  *Only visible when the rebase extension is
		enabled*
	:guilabel:`Import from here to selected to MQ`
		Import selected revision range into the current patch queue.
		*Only visible when MQ is enabled*
	:guilabel:`Select common ancestor`
		Selects (highlights) the common ancestor of the two selected
		revisions.  Helpful, when reviewing merges.

.. [#rcm1] The strip command will store the stripped revisions in a bundle file
		that can later be reapplied.
		See also `EditingHistory <http://mercurial.selenic.com/wiki/EditingHistory>`_.

File Context Menus
------------------

Right-clicking on filenames in the file list (bottom left) pane will
bring up a context menu for the selected file:

	:guilabel:`Visual Diff`
		Open this revision of the file in your visual diff tool
	:guilabel:`Diff to Local`
		Visualize differences between this revision and your checked
		out version
	:guilabel:`View at Revision`
		Open this revision of the file in your visual editor [#flcm1]_
	:guilabel:`Save at Revision`
		Write this revision of the file to specified location
	:guilabel:`File History`
		Show revisions that modified this file [#flcm2]_
	:guilabel:`Annotate File`
		Open this file in the datamine app, annotated at this revision
	:guilabel:`Revert File Contents`
		Checkout this specific revision of this file [#flcm3]_
 
.. [#flcm1] :menuselection:`Global Settings --> TortoiseHg --> Visual Editor`
.. [#flcm2] Does not show revisions where a file was deleted, as this is only a
            manifest change, it does not modify the file's history.
.. [#flcm3] The new contents will appear as local changes and must be committed.


Message Parsing
---------------

The changeset display pane will detect and underline changeset hashes,
HTTP(s) URLs, and bug report identifiers inside changeset messages.
These underlined phrases are clickable links.

Every word-boundary delimited string of 12 or 40 characters from the
range [0-9a-f] is considered a changeset link. Clicking on it in the
repository explorer will jump to the given changeset if possible.

HTTP and HTTPS URLs are similarly turned into clickable links which are
opened in your default web browser.

Issue tracker links are enabled when configured in the tortoisehg
section of your configuration files.  Since only a single issue tracker
can be configured at a time, it is typically configured in the
repository's :file:`.hg/hgrc` file.  There are two keys: issue.regex and
issue.link. The first defines the regex to match when picking up issue
numbers, while the second defines the command to run when an issue
number is recognized.

You may include groups in issue.regex, and corresponding {n} tokens in
issue.link (where n is a non-negative integer). {0} refers to the entire
string matched by issue.regex, while {1} refers to the first group and
so on. If no {n} tokens are found in issue.link, the entire matched
string is appended instead.

Examples::

	BitBucket:
	issue.regex = #(\d+)\b
	issue.link = http://bitbucket.org/<your project and repo>/issue/{1}/

	Mercurial:
	issue.regex = \bissue\d+\b
	issue.link = http://mercurial.selenic.com/bts/


Keyboard navigation
-------------------

:kbd:`Ctrl-P`
	Zoom to the working directory parent revision
:kbd:`Ctrl-D`
	Display visual diffs for selected changeset or file
:kbd:`Ctrl-S`
	Toggle revision set / filter toolbar
:kbd:`Ctrl-T`
	Toggle the goto revision toolbar


Configurables
-------------

The changelog browser has a few configurable options that can be set in
the TortoiseHg Settings dialog on the Changelog tab.

	:guilabel:`Author coloring`
		If true, each author's changeset will be given a unique color
	:guilabel:`Long Summary`
		Concatenate commit message lines until 80 chars are reached
	:guilabel:`Graph batch limit`
		Number of revisions to read in each batch load
	:guilabel:`Dead Branches`
		Comma separated list of branch names that should be ignored
		when building a list of branch names for a repository.
	:guilabel:`Branch Colors`
		Space separated list of branch names and colors on the
		form branch:#XXXXXX. Spaces and colons in the branch name must be
		escaped using a backslash (\\). Likewise some other characters
		can be escaped in this way, e.g. \\u0040 will be decoded to the
		@ character, and \\n to a linefeed.
	:guilabel:`Hide Tags`
		Space separated list of tags that will not be shown.  Useful
		example: Specify "qbase qparent qtip" to hide the standard tags
		inserted by the Mercurial Queues Extension.

The exact colors given to particular users can be configured by adding
lines like these to your :file:`Mercurial.ini` file: ::

	[tortoisehg]
	authorcolor.USERNAME = color

The changelog browser also respects the following settings on the
TortoiseHg tab:

	:guilabel:`Tab Width`
		Number of spaces to expand tabs in diffs
	:guilabel:`Max Diff Size`
		Maximum size of file to be diffed


From command line
-----------------

The Workbench can be started from command line ::

	thg log [OPTIONS] [FILE]

	aliases: history

	changelog viewer

	options:

	 -l --limit  limit number of changes displayed

	use "thg -v help workbench" to show global options

.. vim: noet ts=4
