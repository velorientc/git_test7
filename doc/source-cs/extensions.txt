*******
Extenze
*******

.. module:: extensions
    :synopsis: Describe extensions bundled with TortoiseHg binary packages

Tato kapitola popisuje extenze Mercurialu, které jsou pro Windows dodávány s binárními balíčky TortoiseHg. Tato rozšíření jsou připojena pro pohodlí uživatelů, kteří si je mohou zpřístupnit, jakmile je potřebuji.

Hgfold
======

`hgfold <http://mercurial.selenic.com/wiki/CaseFoldExtension>`_  je rozšíření Mercurialu, které pomůže uživatelům Windows s kolizemi jmen souborů v VFAT a NTFS.

Přidá možnosti k následujícím příkazům Mercurialu. Více info viz :command:`hg help <command>`::

	up    - dovolí aktualizovat k revizi s kolizemi jmen souborů
	merge - dovolí sloučení s changesetem, který by vytvořil kolizi jmen souborů

Extenze v současné době neumí kolizi zabránit. Viz wiki Mercurialu.     

**Instalace**


Abychom si vyzkoušeli použití tohoto pluginu, zadáme příkaz z příkazového řádku::

	hg --config "extensions.fold=" status
	
Můžeme jej zaké zapsat do konfiguračního souboru Mercurial.ini nebo do souboru hgrc v repozitáři::

	[extensions]
	fold=

Učíníme-li to, můžeme vypustit opci --config.

 

**Varování**

Jako u všech slučovacích operací musí soubor fold.py změnit rodiče pracovního adresáře. To se stále ještě zkouší a proto používejte opatrně.

Dostaneme-li po běhu příkazu :command:`hg recover` chybové hlášení, vyzkoušíme příkaz :command:`hg debugsetparents` <číslo revize **tip**>`. Toto číslo zjistíme příkazem :command:`hg log`.


	
Perfarce
========

`Perfarce <http://www.kingswood-consulting.co.uk/hg/perfarce/>`_ home
page.

Tato extenze je dokumentována v odstavci :ref:`perfarce-perforce` kapitoly :doc:`nonhg`.
 
HGEOL
=====

Extenze hgeol je případným nástupcem extenze win32text. Pokouší se řešit kompabilitní problémy EOLN kompletnějším a robustnějším způsobem. Místo popisu na tomto místě uvedeme odkazy na online-ovou dokumentaci, která se neustále vyvíjí.

* `EOLTranslationPlan <http://mercurial.selenic.com/wiki/EOLTranslationPlan>`_
* `Source code <http://bitbucket.org/mg/hg-eol/>`_

Mercurial-Keyring
=================

* `Mercurial Keyring <http://pypi.python.org/pypi/mercurial_keyring>`_ home page
* `Keyring Extension <http://mercurial.selenic.com/wiki/KeyringExtension>`_ wiki page

Extenze keyring používají své knihovny pro bezpečné uložení hesel (HTTP/HTTPS a SMTP) s použitím určité databáze (Gnome Keyring, KDE KWallet, OSXKeyChain, zaměřená řešení pro Win32 a příkazový řádek).


**Co se provádí**

Při první akci pull/push do/z daného vzdáleného repozitáře požádá extenze o heslo HTTP a uloží jej (zadané v kombinaci jména uživatele a URL vzdáleného repozitáře) do databáze hesel. Při další akci hledá jméno uživatele v .hg/hgrc a heslo v databázi a tyto důvěrné údaje použje, pokud je nalezne.

Podobně při posílání e-mailu přes SMTP server, který vyžaduje autorizaci, požádá o zadání hesla při prvním použití serveru, uloží jej do databáze a při dalších použitích jej opět použije.

Stane-li se heslo nesprávné (protože bylo neplatné, nebo že bylo změněno), je uživatel požádán o zadání hesla znovu.

**Instalace**

Nejprve musí být umožněna extenze v souboru Mercurial.ini::

	[extensions]
	mercurial_keyring=

**Password backend configuration**

The most appropriate password backend should usually be picked automatically,
without configuration. Still, if necessary, it can be configured using
~/keyringrc.cfg file (keyringrc.cfg in the home directory of the current user).
Refer to `keyring docs <http://pypi.python.org/pypi/keyring>`_
for more details.

.. note::
	On Windows XP and above, your encrypted passwords are stored in the
	credentials subsystem using
	`CredRead <http://msdn.microsoft.com/en-us/library/aa374804%28VS.85%29.aspx>`_ and `CredWrite <http://msdn.microsoft.com/en-us/library/aa375187%28VS.85%29.aspx>`_

.. note::
	On Windows 2K, the encrypted passwords are stored in the system
	registry under HKCU\\Software\\Mercurial\\Keyring.

**Konfigurace repozitáře (HTTP)**

Editujte repozitář -> lokální -> .hg/hgrc a ulož tam cestu ke vzdálenému repozitáři, jméno uživatele, nikoli však heslo. Na příklad::

	[paths]
	myremote = https://my.server.com/hgrepo/someproject

	[auth]
	myremote.schemes = http https
	myremote.prefix = my.server.com/hgrepo
	myremote.username = mekk

Jednodušší forma s vloženým názvem url může být také použita:: 

	[paths]
	bitbucket = https://User@bitbucket.org/User/project_name/

.. note::
	Je-li v :file:`.hg/hgrc` zadáno jméno uživatele i heslo, potom je extenze použije bez použití heslové databáze. Není-li jméno uživatele uvedeno, extenze bude pokaždé vyžadovat osobní údaje, také bez uložení hesla. Takže v obou případech je účinné se vrátit k implicitnímu chování.
	
Podrobnější informace získáte v `[auth] <http://www.selenic.com/mercurial/hgrc.5.html#auth>`_.

**Konfigurace repozitáře (SMTP)**

Editujte buď repozitář -> lokální -> .hg/hgrc nebo ~/.hgrc (vhodnější je obvykle ten druhý)  a zadejte tam všechny standardní vlastnosti pro email a smtp, včetně názvu uživatele smtp ale bez hesla pro smtp. Na příklad::

	[email]
	method = smtp
	from = Joe Doe <Joe.Doe@remote.com>

	[smtp]
	host = smtp.gmail.com
	port = 587
	username = JoeDoe@gmail.com
	tls = true

Stejně jako v případě HTTP, musíte zadat jméno uživatele ale nesmíte zde uvádět heslo, chcete-li použít extenzi. V opačném případě se procedura překlopí do implicitního chování.

**Použití**

Konfigurujte repozitář jak výše uvedeno, pak už jen stahujte a vysílejte (pull a push) nebo emailujte. Na heslo byste měl být tázán pouze jednou (pro každou kombinaci jména uživatele a remote_repository_url).

.. vim: noet ts=4

projrc
======

`projrc <http://mercurial.selenic.com/wiki/ProjrcExtension>`_ je extenze, která prozkoumá soubor .hg/projrc, hledaje další konfigurační možnosti. Soubor se přenese klonováním a stažením (pull) ze seznamu serverů, který  '''musí ''' být nakonfigurován uživatelem. Z bezpečnostních důvodů '''musí ''' být také uvedeno, která konfigurační nastavení ''`projrc''` mají být přenesena (implicitně se žádná nastavení ze žádného serveru nepřenášejí).
Uživatel také může nastavit extenzi tak, že automaticky zahrne všechny změny do souboru .hg/projrc.

To je důležité pro centralizovaná nastavení, kde chcete distribuovat konfigurační nastavení do všech repozitářů s minimálním úsilím. Zejména to lze použít pro přemapování subrepozitářových zdrojů, jak je vysvětleno v textu 
`SubrepoRemappingPlan <http://mercurial.selenic.com/wiki/SubrepoRemappingPlan>`_.

**Konfigurace**

Tato extenze (jako většina jiných) je implicitně nepovolena. Abyste ji mohli používat, musíte ji nejprve povolit v panelu Setting/Extension.

Je-li extenze povolena, vidíte nový vstup "Projrc" v dialogu pro nastavení. Zde můžete extenzi konfigurovat úpravou následujících položek:

	:guilabel:`Request confirmation`
        Je-li True (implicitně), jste vyzván k potvrzení kdykoliv extenze zaznamená změny v souboru .hg/projrc vzdáleného serveru.
        Je-li False, extenze automaticky přijme všechny změny souboru .hg/projrc vzdáleného serveru.

    :guilabel:`Servers`
        Toto nastavení je seznam čárkami oddělených globů, které se shodují s názvy serverů, z nichž bude soubor projrc stažen (pulled).
		Pokud není toto nastvení zadáno, žádné soubory .hg/projrc se nikdy ze žádného serveru nepřenesou.
		
    :guilabel:`Include`
        Tímto klíčem určíte, které sekce a které klíče budou přijaty ze vzdálených souborů projrc.
		Je to seznam čárkami oddělených globů, které se shodují s názvy sekcí nebo klíčů, které mohou být připojeny.
		Názvy klíčů musí být určeny názvem jejich sekce následovaným tečkou, následovanou názvem klíče (např. "''`diff.git`''").

        Všechny sekce a klíče povolíte zadáním "*" (bez uvozovek).

    :guilabel:`Exclude`
        Toto nastavení je podobné nastavení "''`Include`''" ale má opačný účinek. Deklaruje seznam nastavení, která nebudou přenesena ze společných soubofů projrc. 

        Seznam "exclude" má stejnou skladbu jako seznam "include". Je-li zadán exkluzivní seznam ale inkluzivní seznam je prázdný nebo neexistuje, budou připojeny všechny nevyloučené klíče.

Jsou-li zadány oba seznamy a klíč nalézá shodu v obou seznamech, má prioritu nejvíce explicitní shoda v následujícím pořadí:

    * za nejvíce explicitní jsou považovány přesné shody pro klíče   např. "''`ui.merge`''");
    * následují shody vzorů (globů) (např.     "''`auth.bitbucket.com.*`''"), přičemž nejvíce explicitní je nejdelší vzor shody;
    * shody na úrovni sekcí (e.g. "''`ui`''");
    * globální ("''`*`''") shody.

Shoduje-li se klíč stejnou délkou jak s exkluzivními, tak s inkluzivními vzory, je klíč "zahrnut" (to jest, inkluze má přednost pře exkluzí).

**Použití**

Řádně nastavená a povolená extenze prohledá soubory .hg/projrc při každém klonování nebo stahování z repozitářů, uvedených v její konfiguraci "servers".

Kdykoliv extenze zjistí změnu ve vzdáleném souboru projrc (e.g. when
you do not have a .hg/projrc file yet, or when the contents of said file
have changed on the server), obdržíte varování pokud nemáte "Require confirmation" nastaveno na False (v kterémžto případě extenze předpokládá, že změny přijímáte). Přijmete-li změny, váš lokální soubor .hg/projrc je aktualizován a jeho nastavení jsou Mercurialem a TortoiseHg vzata v úvahu.

Má-li lokální repozitář soubor .hg/projrc, uvidíte v dialogu pro nastavení další panel s názvem "project settings (.hg/projrc)". 

Tento panel je pouze pro čtení a ukazuje aktuální nastavení v souboru .hg/projrc. I když můžete aktualizovat svoji lokální verzi .hg/projrc, nemožnost měnit údaje v panelu naznačuje, že nemůžete měnit nastavení vzdáleného repozitáře a že když se nastavení vzdáleného repozitáře změní, vaše lokální kopie bude aktualizována při nejbližší akci pull (pokud to dovolíte).

Panel "project settings" se zařadí mezi panely "global settings" a "repository settings", čímž je naznačováno, že jeho nastavení jsou použita po globálních nastaveních ale před nastaveními lokálního repozitáře (uvedenými v souboru .hg/hgrc) 


**Dodatečná poznámka**

Podrobnější údaje o používání a konfiguraci z přikazového řádku, jakož i nejčersvější informace o extenzi získáte na stránce 
`Wiki <http://mercurial.selenic.com/wiki/ProjrcExtension>`_.


pbranch
=======

Patch Branches (větve oprávek- `pbranch <http://mercurial.selenic.com/wiki/PatchBranchExtension>`_) 
je postup pro vytváření oprávkových řad pro předávání do hlavního repozitáře. Je založen na tematických větvích (pro každou oprávku jedna) a je proto velmi vhodný pro dlouhodobý vývoj a údržbu, zejména při kolektivní spolupráci.

`Podrobný návod <http://arrenbrecht.ch/mercurial/pbranch/>`_ je na webu.

Přidává se řada příkazů, které lze zobrazit příkazem :command:`hg help pbranch`::

 pbackout       - backs out the current patch branch (undoes all its changes)
 pdiff          - prints the final diff for the current or given patch branch
 peditmessage   - edit the patch message
 pemail         - send patches by email
 pexport        - exports patches
 pextdiff       - combines pdiff and extdiff
 pgraph         - print an ASCII art rendering of the patch dependency graph
 pmerge         - merge pending heads from dependencies into patch branches
 pmessage       - print the patch message(s)
 pnew           - start a new patch branch
 pstatus        - print status of current (or given) patch branch
 reapply        - reverts the working copy of all files touched by REV to REV
 
TortoiseHg nabídne novou kartu se zobrazením grafu závislosti oprávek.

 .. figure:: figures/pbranch.png
	:alt: Pbranch task tab

	Pbranch task tab

**Instalace**

Protože tato extenze není v TortoiseHg implicitně nainstalována, musíte si ji stáhnout z `<http://bitbucket.org/parren/hg-pbranch>`_. Ujistěte se, že stahujete správnou verzi s ohledem na verzi Mercurialu, spojeného s TortoiseHg (viz stránku wiki zdrojového situ). 
Stažený plugin otestujete zadáním následujícího příkazu::

	hg --config "extensions.pbranch=C:\path\to\pbranch.py" pstatus

Můžete jej přidat do konfiguračního souboru Mercurial.ini nebo repozitářového souboru .hgrc následovně::

	[extensions]
	pbranch = C:\path\to\pbranch.py
 
Pokud tak učiníte, můžete vypouštět opci --config.
 
.. vim: noet ts=4
