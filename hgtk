#!/usr/bin/env python
#
# front-end script for TortoiseHg dialogs
#
# Copyright (C) 2008-9 Steve Borho <steve@borho.org>
# Copyright (C) 2008 TK Soh <teekaysoh@gmail.com>
#

import os
import sys

if hasattr(sys, "frozen"):
    # Prepend C:\Program Files\TortoiseHg\gtk (equiv) to the path
    from tortoisehg.util import paths
    gtkpath = os.path.join(paths.bin_path, 'gtk')
    os.environ['PATH'] = os.pathsep.join([gtkpath, os.environ['PATH']])
else:
    # if hgtk is a symlink, insert symlink target directory in sys.path
    thgpath = os.path.dirname(os.path.realpath(__file__))
    testpath = os.path.join(thgpath, 'tortoisehg')
    if os.path.isdir(testpath) and thgpath not in sys.path:
        sys.path.insert(0, thgpath)


import pygtk
pygtk.require('2.0')
import gtk

from mercurial import demandimport
demandimport.ignore.append('win32com.shell')
demandimport.ignore.append('tortoisehg.util.config')
demandimport.enable()
from mercurial import ui, util
from tortoisehg.util.hgversion import hgversion, checkhgversion
import cStringIO
import traceback

try:
    import tortoisehg.hgtk.hgtk
except ImportError:
    sys.stderr.write("abort: couldn't find hgtk libraries in [%s]\n" %
                     ';'.join(sys.path))
    sys.stderr.write("(check your install and PYTHONPATH)\n")
    sys.exit(-1)

_ui = ui.ui()
capt = _ui.configbool('tortoisehg', 'stderrcapt', True)

err = checkhgversion(hgversion)
if err:
    _ui.warn('abort: %s\n' % err)
    sys.exit(1)

if not capt or 'THGDEBUG' in os.environ or '--profile' in sys.argv:
    sys.exit(tortoisehg.hgtk.hgtk.dispatch(sys.argv[1:]))
else:
    mystderr = cStringIO.StringIO()
    origstderr = sys.stderr
    sys.stderr = mystderr
    ret = 0
    try:
        ret = tortoisehg.hgtk.hgtk.dispatch(sys.argv[1:])
        sys.stderr = origstderr
        mystderr.seek(0)
        for l in mystderr.readlines():
            if l.startswith('Traceback') or l.startswith('TypeError') or \
               l.startswith('NameError'):
                from tortoisehg.hgtk.bugreport import run
                from tortoisehg.hgtk.hgtk import gtkrun
                error = 'Recoverable runtime error (stderr):\n'
                error += mystderr.getvalue()
                opts = {}
                opts['cmd'] = ' '.join(sys.argv[1:])
                opts['error'] = error
                opts['nofork'] = True
                gtkrun(run, _ui, **opts)
                break
        sys.exit(ret)
    except:
        if sys.exc_info()[0] not in [SystemExit, KeyboardInterrupt]:
            sys.stderr = origstderr
            traceback.print_exc()
        else:
            raise SystemExit(ret)
